
-- return {
--   {
--     'kristijanhusak/vim-dadbod-ui',
--     dependencies = {
--       { 'tpope/vim-dadbod', lazy = true },
--       { 'kristijanhusak/vim-dadbod-completion', ft = { 'sql', 'mysql', 'plsql' }, lazy = true }, -- Optional
--     },
--     cmd = {
--       'DBUI',
--       'DBUIToggle',
--       'DBUIAddConnection',
--       'DBUIFindBuffer',
--     },
--     init = function()
--       -- Your DBUI configuration
--       vim.g.db_ui_use_nerd_fonts = 1
--     end,
--   },
-- }

-- return {
--   -- Database
--   'tpope/vim-dadbod',
--   'kristijanhusak/vim-dadbod-ui',
--   'kristijanhusak/vim-dadbod-completion',
--
--   dependencies = {
--     { 'tpope/vim-dadbod', lazy = true },
--     { 'kristijanhusak/vim-dadbod-completion', ft = { 'sql', 'mysql', 'plsql' }, lazy = true },
--   },
--   init = function()
--     -- Your DBUI configuration
--     vim.g.db_ui_use_nerd_fonts = 1
--     vim.g.db_ui_execute_on_save = 0
--   end,
-- }
--

-- Database
-- { 'tpope/vim-dadbod', ft = { 'sql', 'mysql', 'plsql' }, lazy = false },
-- -- { 'tpope/vim-dadbod', lazy = true },
-- { 'kristijanhusak/vim-dadbod-completion', lazy = true },
-- {
--   'kristijanhusak/vim-dadbod-ui',
--   lazy = false,
--   opts = {
--     db_ui_execute_on_save = false,
--   },
--   -- }
--   dependencies = {
--     { 'tpope/vim-dadbod', ft = { 'sql', 'mysql', 'plsql' }, lazy = true },
--     { 'kristijanhusak/vim-dadbod-completion', ft = { 'sql', 'mysql', 'plsql' }, lazy = true },
--   },
--   init = function()
--     -- Your DBUI configuration
--     vim.g.db_ui_use_nerd_fonts = 1
--     vim.keymap('n', '<leader>Su', require('kristijanhusak.vim-dadbod-ui').DBUIToggle, { desc = 'Toggle UI' })
--     -- vim.keymap.set('n', '<leader>sd', require('custom.custom_modules.my_telescope').edit_dotfiles, { desc = '[S]earch [D]otFiles' })
--
--     -- { '<leader>S', group = 'Database', nowait = false, remap = false },
--     -- { '<leader>Sf', '<Cmd>DBUIFindBuffer<Cr>', desc = 'Find buffer', nowait = false, remap = false },
--     -- { '<leader>Sq', '<Cmd>DBUILastQueryInfo<Cr>', desc = 'Last query info', nowait = false, remap = false },
--     -- { '<leader>Sr', '<Cmd>DBUIRenameBuffer<Cr>', desc = 'Rename buffer', nowait = false, remap = false },
--     -- { '<leader>Su', '<Cmd>DBUIToggle<Cr>', desc = 'Toggle UI', nowait = false, remap = false },
--   end,
-- },

--   {
--     'hrsh7th/nvim-cmp',
--     dependencies = {
--       'kristijanhusak/vim-dadbod-completion',
--     },
--     -- override the options table that is used in the `require("cmp").setup()` call
--     opts = function(_, opts)
--       -- opts parameter is the default options table
--       -- the function is lazy loaded so cmp is able to be required
--       local cmp = require 'cmp'
--       -- modify the sources part of the options table
--       opts.sources = cmp.config.sources {
--         { name = 'nvim_lsp', priority = 1000 },
--         { name = 'luasnip', priority = 750 },
--         { name = 'buffer', priority = 500 },
--         { name = 'path', priority = 250 },
--         { name = 'vim-dadbod-completion', priority = 700 }, -- add new source
--       }
--       -- return the new table to be used
--       return opts
--     end,
--   },
-- }

--
-- return {
--   {
--     "kristijanhusak/vim-dadbod-ui",
--     dependencies = {
--       { "tpope/vim-dotenv", lazy = true },
--       { "tpope/vim-dadbod", lazy = true },
--       { "kristijanhusak/vim-dadbod-completion", ft = { "sql", "mysql", "plsql" }, lazy = true },
--     },
--     cmd = {
--       "DBUI",
--       "DBUIToggle",
--       "DBUIAddConnection",
--       "DBUIFindBuffer",
--     },
--     init = function()
--       vim.g.db_ui_use_nerd_fonts = 1
--       vim.g.db_ui_winwidth = 30
--       vim.g.db_ui_show_help = 0
--       vim.g.db_ui_use_nvim_notify = 1
--       vim.g.db_ui_win_position = "left"
--
--       require("which-key").register {
--         ["<leader>D"] = {
--           name = "󰆼 Db Tools",
--           u = { "<cmd>DBUIToggle<cr>", " DB UI Toggle" },
--           f = { "<cmd>DBUIFindBuffer<cr>", " DB UI Find buffer" },
--           r = { "<cmd>DBUIRenameBuffer<cr>", " DB UI Rename buffer" },
--           l = { "<cmd>DBUILastQueryInfo<cr>", " DB UI Last query infos" },
--         },
--       }
--     end,
--   },
-- }
--

-- local mappings = {
--   S = {
--     name = 'Database',
--     u = { '<Cmd>DBUIToggle<Cr>', 'Toggle UI' },
--     f = { '<Cmd>DBUIFindBuffer<Cr>', 'Find buffer' },
--     r = { '<Cmd>DBUIRenameBuffer<Cr>', 'Rename buffer' },
--     q = { '<Cmd>DBUILastQueryInfo<Cr>', 'Last query info' },
--   },
--


--markdown
-- return{
-- {
--   -- " set to 1, nvim will open the preview window after entering the Markdown buffer
-- -- " default: 0
-- let g:mkdp_auto_start = 0
--
-- " set to 1, the nvim will auto close current preview window when changing
-- " from Markdown buffer to another buffer
-- " default: 1
-- let g:mkdp_auto_close = 1
--
-- " set to 1, Vim will refresh Markdown when saving the buffer or
-- " when leaving insert mode. Default 0 is auto-refresh Markdown as you edit or
-- " move the cursor
-- " default: 0
-- let g:mkdp_refresh_slow = 0
--
-- " set to 1, the MarkdownPreview command can be used for all files,
-- " by default it can be use in Markdown files only
-- " default: 0
-- let g:mkdp_command_for_global = 0
--
-- " set to 1, the preview server is available to others in your network.
-- " By default, the server listens on localhost (127.0.0.1)
-- " default: 0
-- let g:mkdp_open_to_the_world = 0
--
-- " use custom IP to open preview page.
-- " Useful when you work in remote Vim and preview on local browser.
-- " For more details see: https://github.com/iamcco/markdown-preview.nvim/pull/9
-- " default empty
-- let g:mkdp_open_ip = ''
--
-- " specify browser to open preview page
-- " for path with space
-- " valid: `/path/with\ space/xxx`
-- " invalid: `/path/with\\ space/xxx`
-- " default: ''
-- let g:mkdp_browser = ''
--
-- " set to 1, echo preview page URL in command line when opening preview page
-- " default is 0
-- let g:mkdp_echo_preview_url = 0
--
-- " a custom Vim function name to open preview page
-- " this function will receive URL as param
-- " default is empty
-- let g:mkdp_browserfunc = ''
--
-- " options for Markdown rendering
-- " mkit: markdown-it options for rendering
-- " katex: KaTeX options for math
-- " uml: markdown-it-plantuml options
-- " maid: mermaid options
-- " disable_sync_scroll: whether to disable sync scroll, default 0
-- " sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
-- "   middle: means the cursor position is always at the middle of the preview page
-- "   top: means the Vim top viewport always shows up at the top of the preview page
-- "   relative: means the cursor position is always at relative positon of the preview page
-- " hide_yaml_meta: whether to hide YAML metadata, default is 1
-- " sequence_diagrams: js-sequence-diagrams options
-- " content_editable: if enable content editable for preview page, default: v:false
-- " disable_filename: if disable filename header for preview page, default: 0
-- let g:mkdp_preview_options = {
--     \ 'mkit': {},
--     \ 'katex': {},
--     \ 'uml': {},
--     \ 'maid': {},
--     \ 'disable_sync_scroll': 0,
--     \ 'sync_scroll_type': 'middle',
--     \ 'hide_yaml_meta': 1,
--     \ 'sequence_diagrams': {},
--     \ 'flowchart_diagrams': {},
--     \ 'content_editable': v:false,
--     \ 'disable_filename': 0,
--     \ 'toc': {}
--     \ }
--
-- " use a custom Markdown style. Must be an absolute path
-- " like '/Users/username/markdown.css' or expand('~/markdown.css')
-- let g:mkdp_markdown_css = ''
--
-- " use a custom highlight style. Must be an absolute path
-- " like '/Users/username/highlight.css' or expand('~/highlight.css')
-- let g:mkdp_highlight_css = ''
--
-- " use a custom port to start server or empty for random
-- let g:mkdp_port = ''
--
-- " preview page title
-- " ${name} will be replace with the file name
-- let g:mkdp_page_title = '「${name}」'
--
-- " use a custom location for images
-- let g:mkdp_images_path = /home/user/.markdown_images
--
-- " recognized filetypes
-- " these filetypes will have MarkdownPreview... commands
-- let g:mkdp_filetypes = ['markdown']
--
-- " set default theme (dark or light)
-- " By default the theme is defined according to the preferences of the system
-- let g:mkdp_theme = 'dark'
--
-- " combine preview window
-- " default: 0
-- " if enable it will reuse previous opened preview window when you preview markdown file.
-- " ensure to set let g:mkdp_auto_close = 0 if you have enable this option
-- let g:mkdp_combine_preview = 0
--
-- " auto refetch combine preview contents when change markdown buffer
-- " only when g:mkdp_combine_preview is 1
-- let g:mkdp_combine_preview_auto_refresh = 1
-- },
-- }
--
